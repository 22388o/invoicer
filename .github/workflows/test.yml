name: Build & test on any push

on:
  - push
  - pull_request

jobs:
  build:
    name: Build invoicer
    runs-on: ubuntu-18.04

    env:
      DOCKER_BUILDKIT: 1

    strategy:
      fail-fast: false
      matrix:
        arch:
          - amd64
          - arm64
          - arm32v6
          - arm32v7

    steps:
      - uses: actions/checkout@v1.0.0

      - name: Setup environment
        if: matrix.arch != 'amd64'
        run: |
          GOARCH="$(echo "${{matrix.arch}}" | grep -oE 'arm(64)?')"
          echo ::set-env name=GOARCH::"${GOARCH}"

          GOARM="$(echo "${{matrix.arch}}" | grep arm32 | tail -c 2)"
          echo ::set-env name=GOARM::"${GOARM}"

      - name: Build invoicer in Docker
        run: |
          ARCH="${{matrix.arch}}"
          if [[ "${{matrix.arch}}" == "arm64" ]]; then
            ARCH="arm64v8"
          fi

          docker build --no-cache . \
            --build-arg "ARCH=${ARCH}" \
            --build-arg "GOARCH=${GOARCH}" \
            --build-arg "GOARM=${GOARM}" \
            --tag       "invoicer:${{matrix.arch}}"

      - name: Show built image details
        run: docker images invoicer

      - name: Save image to a .tgz file
        run: |
          mkdir -p image/
          docker save "invoicer:${{matrix.arch}}" | gzip > "image/invoicer-${{matrix.arch}}.tgz"

      - name: Print sha256sum of produced Docker image
        run: sha256sum "image/invoicer-${{matrix.arch}}.tgz"

      - name: Add Docker image as build artifact
        uses: actions/upload-artifact@v1.0.0
        with:
          name: docker-images
          path: image/

      - name: Extract binary from the built image
        run: |
          mkdir -p binary/
          ID=$(docker create "invoicer:${{matrix.arch}}")
          docker cp  "${ID}:/bin/invoicer"  binary/
          docker rm  "${ID}"
          gzip -S "-${{matrix.arch}}.gz" binary/invoicer

      - name: Print sha256sum of extracted binary
        run: sha256sum binary/*

      - name: Add raw binary as build artifact
        uses: actions/upload-artifact@v1.0.0
        with:
          name: binaries
          path: binary/

  test:
    name: Check sanity of images
    runs-on: ubuntu-18.04
    needs: build

    env:
      QEMU_VERSION: v4.2.0
      APP: invoicer

    steps:
      - name: Download build artifact
        uses: actions/download-artifact@v1.0.0
        with:
          name: docker-images

      - name: Print sha256sum of all Docker images
        run: sha256sum docker-images/*

      - name: Register self-compiled qemu
        run: docker run --rm --privileged "meedamian/simple-qemu:${QEMU_VERSION}" -p yes

      - name: Load all images locally
        run: ls -d docker-images/* | xargs -I %  docker load -i "%"

      - name: List all tagged images
        run: docker images "${APP}"

      - name: Run sanity checks
        run: |
          for tag in $(docker images "${APP}" --format "{{.Tag}}"); do
            echo
            echo "~~~~~ ${APP}:${tag} ~~~~~"
            docker inspect "${APP}:${tag}" | jq '.'

            docker run --rm                         "${APP}:${tag}" --version

            docker run --rm --entrypoint=uname      "${APP}:${tag}" -a
            docker run --rm --entrypoint=cat        "${APP}:${tag}" /etc/os-release
            docker run --rm --entrypoint=sha256sum  "${APP}:${tag}" /bin/${APP}

            docker run --rm --entrypoint=sh         "${APP}:${tag}" -c 'apk add --no-cache file && file /bin/${APP}'
          done
