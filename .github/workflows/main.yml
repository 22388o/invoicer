name: Build & deploy invoicer on a git tag push

on:
  push:
    tags:
      - '*'

jobs:
  build:
    name: Build invoicer
    runs-on: ubuntu-18.04
    strategy:
      fail-fast: false
      matrix:
        arch:
          - amd64
          - arm64
          - arm32v6
          - arm32v7

    steps:
      - uses: actions/checkout@v1.0.0

      - name: Set target platform
        if: matrix.arch != 'amd64'
        run: ./scripts/ci-set-target-image-architecture.sh "${{ matrix.arch }}"

      - name: Build invoicer in Docker
        run: >
          DOCKER_BUILDKIT=1 docker build --no-cache .
          --build-arg "goarch=${{ matrix.arch }}"
          --tag       "invoicer:${{ matrix.arch }}"
          --file      Dockerfile

      - name: Show built image details
        run: docker images invoicer

      - name: Save image to a .tgz file
        run: |
          mkdir -p image/
          docker save "invoicer:${{ matrix.arch }}" | gzip > "image/invoicer-${{ matrix.arch }}.tgz"

      - name: Print sha256sum of produced Docker image
        run: sha256sum "image/invoicer-${{ matrix.arch }}.tgz"

      - name: Add Docker image as build artifact
        uses: actions/upload-artifact@v1.0.0
        with:
          name: docker-images
          path: image/

      - name: Extract binary from the built image
        run: |
          mkdir -p binary/
          ID=$(docker create "invoicer:${{ matrix.arch }}")
          docker cp  "${ID}:/bin/invoicer"  binary/
          docker rm  "${ID}"
          gzip -S "-${{ matrix.arch }}.gz" binary/invoicer

      - name: Print sha256sum of extracted binary
        run: sha256sum binary/*

      - name: Add raw binary as build artifact
        uses: actions/upload-artifact@v1.0.0
        with:
          name: binaries
          path: binary/


  docker-hub-push:
    name: Tag & deploy to Docker Hub.  Only after successful build, and test of a pushed git tag

    runs-on: ubuntu-18.04
    needs: build
    steps:
      - uses: actions/checkout@v1.0.0

      - name: Enable Docker manifest features
        run: |
          mkdir -p ~/.docker

          echo '{ "experimental": "enabled" }' > ~/.docker/config.json

          sudo systemctl restart docker

      - name: Print Docker version
        run: docker version

      - name: Download build artifact
        uses: actions/download-artifact@v1.0.0
        with:
          name: docker-images

      - name: Print sha256sum of downloaded images
        run: sha256sum docker-images/*

      - name: Load images locally
        run: ls docker-images/ | xargs -I % docker load -i "docker-images/%"

      - name: List all tagged images
        run: docker images invoicer

      - name: Version-tag all images
        run: |
          VERSION="$(echo "${GITHUB_REF}" | awk -F/ '{print $NF}')"

          for arch in $(docker images invoicer --format "{{.Tag}}"); do
            docker tag  "invoicer:${arch}"  "${GITHUB_REPOSITORY,,}:${VERSION}-linux-${arch}"
          done

      - name: List all tagged images
        run: docker images "${GITHUB_REPOSITORY,,}"

      - name: Login to Docker Hub
        run: echo "${{ secrets.DOCKER_PASS }}" | docker login -u="meedamian" --password-stdin

      - name: Push all images
        run: |
          for image in $(docker images "${GITHUB_REPOSITORY,,}" --format "{{.Repository}}:{{.Tag}}"); do
            docker push "${image}"
          done

      - name: Get convenience Docker tag suggestions
        id: tags
        uses: meeDamian/tag-suggestions@v1.0.2

      - name: Create version-exact manifest
        run: >
          ./scripts/ci-create-manifest.sh \
            "${GITHUB_REPOSITORY,,}" \
            "$(echo "${GITHUB_REF}" | awk -F/ '{print $NF}')"

      - name: Create minor-version manifest
        if: steps.tags.outputs.minor != ''
        run: >
          ./scripts/ci-create-manifest.sh \
            "${GITHUB_REPOSITORY,,}" \
            "$(echo "${GITHUB_REF}" | awk -F/ '{print $NF}')" \
            "${{steps.tags.outputs.minor}}"

      - name: Create major-version manifest
        if: steps.tags.outputs.major != ''
        run: >
          ./scripts/ci-create-manifest.sh \
            "${GITHUB_REPOSITORY,,}" \
            "$(echo "${GITHUB_REF}" | awk -F/ '{print $NF}')" \
            "${{steps.tags.outputs.major}}"

      - name: Create latest-version manifest
        if: steps.tags.outputs.latest != ''
        run: >
          ./scripts/ci-create-manifest.sh \
            "${GITHUB_REPOSITORY,,}" \
            "$(echo "${GITHUB_REF}" | awk -F/ '{print $NF}')" \
            "${{steps.tags.outputs.latest}}"

      - name: List all tagged images
        run: docker images "${GITHUB_REPOSITORY,,}"


  github-release:
    name: Create Github Release. Only after successful build of a pushed git tag
    runs-on: ubuntu-18.04
    needs: build
    steps:
      - name: Download binaries from build artifacts
        uses: actions/download-artifact@v1.0.0
        with:
          name: binaries

      - name: Print checksums of binaries
        run: sha256sum binaries/*

      - name: Upload binaries to Github Release
        uses: meeDamian/github-release@v1.0.0
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          gzip: false
          files: binaries/*
